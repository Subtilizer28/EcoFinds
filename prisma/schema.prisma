// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String
    emailVerified DateTime?
    description   String?
    phone         String?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    products      Product[] @relation("UserProducts")
}

enum Role {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id                       Int      @id @default(autoincrement())
    userId                   String
    User                     User     @relation("UserProducts", fields: [userId], references: [id])
    title                    String
    category                 String
    description              String
    price                    Float
    qty                      Int
    condition                Condition
    yearOfManufacture        Int
    brand                    String
    model                    String
    dimensionL               Float
    dimensionW               Float
    dimensionH               Float
    weight                   Float
    material                 String
    color                    String
    originalPackaging        Boolean
    manualIncluded           Boolean
    workingConditionDesc     String

    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
}

enum Condition {
    NEW
    LIKE_NEW
    VERY_GOOD
    GOOD
    ACCEPTABLE
    FOR_PARTS
}